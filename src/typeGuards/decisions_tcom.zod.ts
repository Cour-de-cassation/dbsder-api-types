// Generated by ts-to-zod
import { z } from "zod";

import { JusticeFunctionTcom, JusticeRoleTcom } from "../types/decisions_tcom";
import { UnIdentifiedDecision, UnIdentifiedDecisionTcom, Decision, DecisionTcom } from '../types'

import {
    zBlocOccultation,
    zLabelStatus,
    zLabelTreatment,
    zOccultation,
    zPublishStatus,
    zTypePartie,
} from "./common.zod";

export const justiceFunctionTcomSchema = z.nativeEnum(JusticeFunctionTcom);

const compositionTcomSchema = z.object({
    fonction: justiceFunctionTcomSchema.optional(),
    nom: z.string(),
    prenom: z.string().optional(),
    civilite: z.string().optional(),
});

export const justiceRoleTcomSchema = z.nativeEnum(JusticeRoleTcom);

const partieTcomSchema = z.object({
    type: zTypePartie,
    role: justiceRoleTcomSchema,
    nom: z.string(),
    prenom: z.string().optional(),
    civilite: z.string().optional(),
});

const objectIdSchema = z.any();

export const decisionTcomSchema = z.object({
    _id: objectIdSchema.optional(),
    sourceId: z.number().or(z.nan()),
    sourceName: z.literal("juritcom"),
    __v: z.number().or(z.nan()),
    originalText: z.string(),
    pseudoText: z.string().optional(),
    registerNumber: z.string(),
    dateDecision: z.string(),
    jurisdictionCode: z.string(),
    jurisdictionId: z.string(),
    jurisdictionName: z.string(),
    public: z.boolean().optional(),
    solution: z.string().optional(),
    labelStatus: zLabelStatus,
    publishStatus: zPublishStatus.optional(),
    labelTreatments: z.array(zLabelTreatment).optional(),
    dateCreation: z.string(),
    publishDate: z.string().optional().nullable(),
    firstImportDate: z.string().optional(),
    lastImportDate: z.string().optional(),
    unpublishDate: z.string().optional().nullable(),
    zoning: z.record(z.unknown()).optional().nullable(),
    originalTextZoning: z.record(z.unknown()).optional(),
    pseudoTextZoning: z.record(z.unknown()).optional(),
    chamberId: z.string().optional(),
    chamberName: z.string().optional(),
    debatPublic: z.boolean(),
    selection: z.boolean(),
    blocOccultation: zBlocOccultation,
    occultation: zOccultation,
    parties: z.array(partieTcomSchema).optional(),
    filenameSource: z.string(),
    appeals: z.array(z.never()),
    codeMatiereCivil: z.string().optional(),
    idGroupement: z.string(),
    idDecisionTCOM: z.string(),
    codeProcedure: z.string().optional(),
    libelleMatiere: z.string().optional(),
    composition: z.array(compositionTcomSchema).optional(),
});

export function hasSourceNameTcom(x: UnIdentifiedDecision): x is UnIdentifiedDecisionTcom
export function hasSourceNameTcom(x: Decision): x is DecisionTcom
export function hasSourceNameTcom(
    x: Decision | UnIdentifiedDecision
): x is DecisionTcom | UnIdentifiedDecisionTcom {
    return x.sourceName === 'juritcom'
}

export function parseDecisionTcom(x: unknown): UnIdentifiedDecisionTcom {
  return decisionTcomSchema.omit({ _id: true }).parse(x)
}
