// Generated by ts-to-zod
import { record, z } from 'zod'
import {
  PseudoStatus,
  BlocOccultation,
  LabelRoute,
  LabelStatus,
  PublishStatus,
  Category,
  SuiviOccultation,
  QualitePartieExhaustive,
  TypePartieExhaustive,
  LabelTreatments,
  Zoning,
  CurrentZoning
} from '../types/common'
import { ObjectId } from 'bson'

export const zLabelStatus = z.enum(LabelStatus)

export const zPublishStatus = z.enum(PublishStatus)

const zCategory = z.enum(Category)

const zEntity = z.object({
  entityId: z.string(),
  text: z.string(),
  start: z.number().or(z.nan()),
  end: z.number().or(z.nan()).optional(),
  category: zCategory,
  score: z.number().or(z.nan()).optional().nullable(),
  certaintyScore: z.number().or(z.nan()).optional().nullable(),
  source: z.string().optional().nullable()
})

const zSentenceIndex = z.object({
  start: z.number().or(z.nan()),
  end: z.number().or(z.nan())
})

const zCheck = z.object({
  check_type: z.string(),
  message: z.string(),
  short_message: z.string(),
  entities: z.array(zEntity),
  sentences: z.array(zSentenceIndex),
  metadata_text: z.array(z.string()),
  _rank: z.number().or(z.nan()).nullable().optional()
})

const zNLPVersionDetails = z.object({
  version: z.string(),
  date: z.string()
})

const zModelName = z.object({
  name: z.string()
})

const zNLPVersion = z.object({
  juriSpacyTokenizer: zNLPVersionDetails,
  juritools: zNLPVersionDetails,
  pseudonymisationApi: zNLPVersionDetails.optional(),
  nlpApi: zNLPVersionDetails.optional(),
  model: zModelName
})

export const zLabelTreatments = z.array(
  z.object({
    order: z.number().or(z.nan()),
    annotations: z.array(zEntity),
    source: z.string(),
    version: zNLPVersion.optional().nullable(),
    treatmentDate: z.string().optional(),
    checklist: z.array(zCheck).optional()
  })
)

export const zPseudoStatus = z.enum(PseudoStatus)

export const zOccultation = z.object({
  additionalTerms: z.string(),
  additionalTermsToAnnotate: z.array(z.string()).optional(),
  additionalTermsToUnAnnotate: z.array(z.string()).optional(),
  categoriesToOmit: z.array(zCategory),
  motivationOccultation: z.boolean().optional()
})

export const zSuiviOccultation = z.enum(SuiviOccultation)

export const zQualitePartie = z.enum(QualitePartieExhaustive)

export const zTypePartie = z.enum(TypePartieExhaustive)

export const zBlocOccultation = z.enum(BlocOccultation)

export const zLabelRoute = z.enum(LabelRoute)

export const zObjectId = z
  .string()
  .refine((id: string) => {
    return ObjectId.isValid(id) && new ObjectId(id).toString() === id
  })
  .transform((_) => new ObjectId(_))

export const zZoneRange = z.object({
  start: z.number(),
  end: z.number()
})

export const zZoningZones = z.object({
  introduction: zZoneRange.optional().nullable(),
  moyens: z.array(zZoneRange).optional(),
  'expose du litige': zZoneRange.optional().nullable(),
  motivations: z.array(zZoneRange).optional(),
  dispositif: zZoneRange.optional().nullable(),
  'moyens annexes': z.array(zZoneRange).optional()
})

export const zIntroductionSubzonageJurinet = z.object({
  n_arret: z.string().optional().nullable(),
  formation: z.string().optional().nullable(),
  publication: z.array(z.string()).optional().nullable(),
  juridiction: z.string().optional().nullable(),
  chambre: z.string().optional().nullable(),
  pourvoi: z.array(z.string()).optional().nullable(),
  composition: zZoneRange.optional().nullable()
})

export const zIntroductionSubzonageJurica = z.object({
  type_arret: z.string().optional().nullable(),
  code_nac: z.string().optional().nullable(),
  nportalis: z.string().optional().nullable(),
  j_preced: zZoneRange.optional().nullable(),
  j_preced_date: z.string().optional().nullable(),
  j_preced_nrg: z.string().optional().nullable(),
  j_preced_npourvoi: z.string().optional().nullable(),
  j_preced_instance: z.string().optional().nullable(),
  composition: zZoneRange.optional().nullable()
})

export const zCurrentZoning = z.object({
  zones: zZoningZones.optional(),
  introduction_subzonage: zIntroductionSubzonageJurinet.or(zIntroductionSubzonageJurica).optional(),
  visa: z.array(z.string()).optional().nullable(),
  is_public: z.number().optional().nullable(),
  is_public_text: z.array(z.string()).optional().nullable(),
  arret_id: z.number()
})

export const zZoning = zCurrentZoning.or(record(z.string(), z.unknown()))

export function isCurrentZoning(x: Zoning): x is CurrentZoning {
  return zCurrentZoning.safeParse(x).success
}

export function parseCurrentZoning(x: unknown): CurrentZoning {
  return zCurrentZoning.parse(x)
}

export function parseLabelStatus(x: unknown): LabelStatus {
  return zLabelStatus.parse(x)
}

export function parseLabelTreatments(x: unknown): LabelTreatments {
  return zLabelTreatments.parse(x)
}

export function parsePublishStatus(x: unknown): PublishStatus {
  return zPublishStatus.parse(x)
}
